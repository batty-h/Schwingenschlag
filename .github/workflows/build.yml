# Name des Workflows
name: Cordova iOS Build

# Wann soll der Workflow ausgelöst werden?
# In diesem Fall bei jedem Push in den "main" Branch.
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Definition der Jobs, die ausgeführt werden sollen
jobs:
  build:
    # Der Job läuft auf einer virtuellen macOS-Maschine
    runs-on: macos-latest

    # Definition der Schritte des Jobs
    steps:
    - name: Checkout Code
      # Holt den Code aus dem Repository
      uses: actions/checkout@v4

    - name: Install Node.js
      # Richtet Node.js ein, was für Cordova benötigt wird
      uses: actions/setup-node@v4
      with:
        node-version: '18' # Oder eine andere Version, die du verwendest

    - name: Install Cordova CLI
      # Installiert die Cordova-Befehlszeilen-Tools global
      run: npm install -g cordova

    - name: Install Dependencies
      # Installiert die Abhängigkeiten deines Projekts
      run: npm install

    - name: Cordova iOS Build
      # Führt den Cordova-Build-Befehl für die iOS-Plattform aus.
      # Der Build-Pfad hängt davon ab, ob für den Simulator oder das Gerät gebaut wird.
      # Hier wird ein Simulator-Build durchgeführt, der keine Codesignierung benötigt.
      run: cordova build ios --emulator --release
      
    - name: Upload iOS App as Artifact
      # Dieser Schritt lädt die App-Datei als Artefakt hoch.
      # Der Pfad zeigt auf das Verzeichnis, in dem der Build die .app-Datei ablegt.
      uses: actions/upload-artifact@v4
      with:
        name: ios-app-build
        path: platforms/ios/build/emulator
